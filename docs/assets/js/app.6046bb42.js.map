{"version":3,"file":"assets/js/app.6046bb42.js","mappings":"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","sources":["webpack://pglite_vector_search/./src/App.vue?2a5e","webpack://pglite_vector_search/./src/App.vue","webpack://pglite_vector_search/./src/utils/ollamaAPI.ts","webpack://pglite_vector_search/./src/utils/openAI.ts","webpack://pglite_vector_search/./src/utils/pglite.ts","webpack://pglite_vector_search/./src/utils/chunkFile.ts","webpack://pglite_vector_search/./src/stores/chatMessage.ts","webpack://pglite_vector_search/./src/components/ChatForm.vue?98bc","webpack://pglite_vector_search/./src/components/ChatForm.vue","webpack://pglite_vector_search/./src/components/ChatForm.vue?22ec","webpack://pglite_vector_search/./src/views/BotBox.vue?4068","webpack://pglite_vector_search/./src/views/BotBox.vue","webpack://pglite_vector_search/./src/views/BotBox.vue?62c7","webpack://pglite_vector_search/./src/router/index.ts","webpack://pglite_vector_search/./src/main.ts","webpack://pglite_vector_search/webpack/bootstrap","webpack://pglite_vector_search/webpack/runtime/chunk loaded","webpack://pglite_vector_search/webpack/runtime/compat get default export","webpack://pglite_vector_search/webpack/runtime/create fake namespace object","webpack://pglite_vector_search/webpack/runtime/define property getters","webpack://pglite_vector_search/webpack/runtime/ensure chunk","webpack://pglite_vector_search/webpack/runtime/get javascript chunk filename","webpack://pglite_vector_search/webpack/runtime/get mini-css chunk filename","webpack://pglite_vector_search/webpack/runtime/global","webpack://pglite_vector_search/webpack/runtime/hasOwnProperty shorthand","webpack://pglite_vector_search/webpack/runtime/load script","webpack://pglite_vector_search/webpack/runtime/make namespace object","webpack://pglite_vector_search/webpack/runtime/publicPath","webpack://pglite_vector_search/webpack/runtime/jsonp chunk loading","webpack://pglite_vector_search/webpack/startup"],"sourcesContent":["import { defineComponent as _defineComponent } from 'vue'\nimport { unref as _unref, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\"\n\nconst _hoisted_1 = { class: \"main-box\" }\n\nimport { RouterView } from 'vue-router'\n\nexport default /*@__PURE__*/_defineComponent({\n  __name: 'App',\n  setup(__props) {\n\n\nreturn (_ctx: any,_cache: any) => {\n  return (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [\n    _createVNode(_unref(RouterView))\n  ]))\n}\n}\n\n})","import script from \"./App.vue?vue&type=script&setup=true&lang=ts\"\nexport * from \"./App.vue?vue&type=script&setup=true&lang=ts\"\n\nimport \"./App.vue?vue&type=style&index=0&id=6e8530c3&scoped=true&lang=css\"\n\nimport exportComponent from \"../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-6e8530c3\"]])\n\nexport default __exports__","// baseURL, chatModel, embeddingModelを外部からセットできるようにする\r\nlet currentBaseURL = '';\r\nlet currentChatModel = '';\r\nlet currentEmbeddingModel = '';\r\n\r\ninterface ChatMessage {\r\n  role: 'user' | 'assistant' | 'system';\r\n  content: string;\r\n}\r\n\r\ninterface ChatResponse {\r\n  model: string;\r\n  created_at: string;\r\n  message: ChatMessage;\r\n  done: boolean;\r\n}\r\n\r\ninterface EmbeddingResponse {\r\n  embedding: number[];\r\n}\r\n\r\n// Ollama APIのオプション\r\nconst options = {\r\n    num_thread: 10,\r\n}\r\n\r\nexport function setOllamaConfig({ baseURL, chatModel, embeddingModel }: { baseURL: string, chatModel: string, embeddingModel: string }) {\r\n    currentBaseURL = baseURL;\r\n    currentChatModel = chatModel;\r\n    currentEmbeddingModel = embeddingModel;\r\n}\r\n\r\n// 初期化\r\nsetOllamaConfig({\r\n    baseURL: currentBaseURL,\r\n    chatModel: currentChatModel,\r\n    embeddingModel: currentEmbeddingModel\r\n});\r\n\r\nexport async function generateKeyWord(userMessage: string, systemPrompt: string): Promise<string> {\r\n    try {\r\n        const messages: ChatMessage[] = [\r\n            { role: 'system', content: systemPrompt },\r\n            { role: 'user', content: userMessage }\r\n        ];\r\n\r\n        const response = await fetch(`${currentBaseURL}/api/chat`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n                model: currentChatModel,\r\n                messages: messages,\r\n                stream: false,\r\n                options: options\r\n            })\r\n        });\r\n\r\n        if (!response.ok) {\r\n            throw new Error(`Ollama API error: ${response.status} ${response.statusText}`);\r\n        }\r\n\r\n        const data: ChatResponse = await response.json();\r\n        return data.message.content || '';\r\n    } catch (error) {\r\n        console.error('Error generating keyword:', error);\r\n        throw error;\r\n    }\r\n}\r\n\r\nexport async function* streamChatMessage(userMessage: string, memory: any[], systemPrompt: string, chatHistory: any[] = []): AsyncGenerator<string> {\r\n    try {\r\n        const messages: ChatMessage[] = [\r\n            { role: 'system', content: systemPrompt },\r\n            ...chatHistory,\r\n            { role: 'user', content: userMessage }\r\n        ];\r\n\r\n        const response = await fetch(`${currentBaseURL}/api/chat`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n                model: currentChatModel,\r\n                messages: messages,\r\n                options: options,\r\n                stream: true\r\n            })\r\n        });\r\n\r\n        if (!response.ok) {\r\n            throw new Error(`Ollama API error: ${response.status} ${response.statusText}`);\r\n        }\r\n\r\n        const reader = response.body?.getReader();\r\n        if (!reader) {\r\n            throw new Error('レスポンスボディを読み取れません');\r\n        }\r\n\r\n        const decoder = new TextDecoder();\r\n        let buffer = '';\r\n\r\n        while (true) {\r\n            const { done, value } = await reader.read();\r\n            if (done) break;\r\n\r\n            buffer += decoder.decode(value, { stream: true });\r\n            const lines = buffer.split('\\n');\r\n            buffer = lines.pop() || '';\r\n\r\n            for (const line of lines) {\r\n                if (line.trim()) {\r\n                    try {\r\n                        const data: ChatResponse = JSON.parse(line);\r\n                        if (data.message?.content) {\r\n                            yield data.message.content;\r\n                        }\r\n                        if (data.done) {\r\n                            return;\r\n                        }\r\n                    } catch (parseError) {\r\n                        console.warn('JSON解析エラー:', parseError);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    } catch (error) {\r\n        console.error('Error streaming chat message:', error);\r\n        throw error;\r\n    }\r\n}\r\n\r\nexport async function generateEmbedding(userMessage: string): Promise<number[]> {\r\n    try {\r\n        const response = await fetch(`${currentBaseURL}/api/embeddings`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n                model: currentEmbeddingModel,\r\n                prompt: userMessage,\r\n                options: options\r\n            })\r\n        });\r\n\r\n        if (!response.ok) {\r\n            throw new Error(`Ollama API error: ${response.status} ${response.statusText}`);\r\n        }\r\n\r\n        const data: EmbeddingResponse = await response.json();\r\n        return data.embedding || [];\r\n    } catch (error) {\r\n        console.error('Error generating embedding:', error);\r\n        throw error;\r\n    }\r\n}\r\n\r\nexport async function getDimension(): Promise<number> {\r\n    try {\r\n        const response = await fetch(`${currentBaseURL}/api/embeddings`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n                model: currentEmbeddingModel,\r\n                prompt: \"テスト\",\r\n            })\r\n        });\r\n\r\n        if (!response.ok) {\r\n            throw new Error(`Ollama API error: ${response.status} ${response.statusText}`);\r\n        }\r\n\r\n        const data: EmbeddingResponse = await response.json();\r\n        const dimension = data.embedding.length;\r\n        return dimension;\r\n    } catch (error) {\r\n        console.error('Error getting model dimension:', error);\r\n        throw error;\r\n    }\r\n}\r\n\r\nexport function getCurrentConfig() {\r\n    return {\r\n        baseURL: currentBaseURL,\r\n        chatModel: currentChatModel,\r\n        embeddingModel: currentEmbeddingModel\r\n    };\r\n}","import { OpenAI } from 'openai';\r\nimport { setOllamaConfig, generateKeyWord as ollamaGenerateKeyWord, streamChatMessage as ollamaStreamChatMessage, generateEmbedding as ollamaGenerateEmbedding, getDimension as ollamaGetDimension } from '@/utils/ollamaAPI';\r\n\r\n// baseURL, chatModel, embeddingModelを外部からセットできるようにする\r\nlet openai: OpenAI | null = null;\r\nlet currentBaseURL = 'http://localhost:11434';\r\nlet currentChatModel = 'gemma3:1b';\r\nlet currentEmbeddingModel = 'kun432/cl-nagoya-ruri-base:latest';\r\n\r\nlet useOllamaAPI = false;\r\n\r\n// OpenAI APIのエンドポイントのサフィックス（本当に固定で良いのかは不明）\r\nconst openAIEndpointSuffix = '/v1';\r\n\r\nexport function setOpenAIConfig({ baseURL, chatModel, embeddingModel, useOllamaAPI: useOllama }: { baseURL: string, chatModel: string, embeddingModel: string, useOllamaAPI?: boolean }) {\r\n    currentBaseURL = baseURL;\r\n    currentChatModel = chatModel;\r\n    currentEmbeddingModel = embeddingModel;\r\n    if (useOllama !== undefined) {\r\n        useOllamaAPI = useOllama;\r\n    }\r\n    openai = new OpenAI({\r\n        baseURL: currentBaseURL + openAIEndpointSuffix,\r\n        apiKey: 'ollama',\r\n        dangerouslyAllowBrowser: true,\r\n    });\r\n    // ollamaAPIにも反映\r\n    setOllamaConfig({\r\n        baseURL: currentBaseURL,\r\n        chatModel: currentChatModel,\r\n        embeddingModel: currentEmbeddingModel\r\n    });\r\n}\r\n\r\n// 初期化\r\nsetOpenAIConfig({\r\n    baseURL: currentBaseURL,\r\n    chatModel: currentChatModel,\r\n    embeddingModel: currentEmbeddingModel\r\n});\r\n\r\nexport async function generateKeyWord(userMessage: string): Promise<string> {\r\n    try {\r\n        if (!openai) throw new Error('OpenAIクライアントが初期化されていません');\r\n\r\n        const systemPrompt = `ユーザの質問に含まれるキーワードを以下のルールで抽出してください。余分な説明は含めないでください。\r\n        ・キーワードをダブルクォーテーション（\"）で囲む\r\n        ・キーワードはカンマ（,）で区切る\r\n        ・キーワードは文章から直接抽出し、改変しないこと\r\n        ・キーワードは2文字以上の単語であること\r\n        ・キーワードが10個より少ない場合は、今あるキーワードの同義語や関連語を追加して10個にする\r\n        例: \"キーワード1\",\"キーワード2\",\"キーワード3\"`;\r\n\r\n        if (useOllamaAPI) {\r\n            // Ollama APIを使用\r\n            return await ollamaGenerateKeyWord(userMessage, systemPrompt);\r\n        }\r\n\r\n        const response = await openai.chat.completions.create({\r\n            model: currentChatModel,\r\n            messages: [\r\n                {\r\n                    role: 'system',\r\n                    content: systemPrompt\r\n                },\r\n                { role: 'user', content: userMessage }\r\n            ],\r\n        });\r\n\r\n        const content = response.choices?.[0]?.message?.content;\r\n        return content || '';\r\n    } catch (error) {\r\n        console.error('Error generating keyword:', error);\r\n        throw error;\r\n    }\r\n}\r\n\r\nexport async function* streamChatMessage(userMessage: string, memory: any[], chatHistory: any[] = []): AsyncGenerator<string> {\r\n    try {\r\n        if (!openai) throw new Error('OpenAIクライアントが初期化されていません');\r\n        \r\n        // 参考ファイル名を取得（重複を除く）\r\n        const referenceFiles = memory.length > 0 ? \r\n            Array.from(new Set(memory.filter(m => m.filename).map(m => m.filename))) : [];\r\n        \r\n        // チャット履歴を考慮したシステムプロンプト\r\n        let systemPrompt = '';\r\n        if (memory.length > 0) {\r\n            systemPrompt = `与えられた参考情報を使用してユーザの質問に答えてください。\r\n            ・質問と直接一致する情報がない場合でも、質問の意図や類似した概念に関連する情報を探して回答してください。\r\n            ・回答に推測や仮定を含めないでください。\r\n            ・過去の会話履歴がある場合は、その内容を考慮して文脈に沿った適切な回答をしてください。\r\n            ・参考情報はすでに関連性が高い順に並べられています。\r\n            \r\n            参考情報：\\n${memory.map(m => m.content).join('\\n')}`;\r\n        } else {\r\n            systemPrompt = 'ユーザの質問に答えてください。';\r\n        }\r\n\r\n        // メッセージ履歴を構築（システム→履歴→現在の質問の順）\r\n        const messages = [\r\n            { role: 'system', content: systemPrompt },\r\n            ...chatHistory,\r\n            { role: 'user', content: userMessage }\r\n        ];\r\n\r\n        if (useOllamaAPI) {\r\n            // Ollama APIを使用\r\n            for await (const chunk of ollamaStreamChatMessage(userMessage, memory, systemPrompt, chatHistory)) {\r\n                yield chunk;\r\n            }\r\n            // 回答の最後に参考ファイル名を追加\r\n            if (referenceFiles.length > 0) {\r\n                yield `\\n\\n【参考ファイル】\\n${referenceFiles.join(', ')}`;\r\n            }\r\n            return;\r\n        }\r\n\r\n        const stream = await openai.chat.completions.create({\r\n            model: currentChatModel,\r\n            messages: messages,\r\n            stream: true,\r\n        });\r\n\r\n        for await (const chunk of stream) {\r\n            const content = chunk.choices?.[0]?.delta?.content;\r\n            if (content) yield content;\r\n        }\r\n        \r\n        // 回答の最後に参考ファイル名を追加\r\n        if (referenceFiles.length > 0) {\r\n            yield `\\n\\n【参考ファイル】\\n${referenceFiles.join(', ')}`;\r\n        }\r\n    } catch (error) {\r\n        console.error('Error streaming chat message:', error);\r\n        throw error;\r\n    }\r\n}\r\n\r\nexport async function generateEmbedding(userMessage: string): Promise<number[]> {\r\n    try {\r\n        if (!openai) throw new Error('OpenAIクライアントが初期化されていません');\r\n\r\n        if (useOllamaAPI) {\r\n            // Ollama APIを使用\r\n            return await ollamaGenerateEmbedding(userMessage);\r\n        }\r\n\r\n        const response = await openai.embeddings.create({\r\n            model: currentEmbeddingModel,\r\n            input: userMessage,\r\n            encoding_format: \"float\",\r\n        });\r\n\r\n        return response.data?.[0]?.embedding || [];\r\n    } catch (error) {\r\n        console.error('Error generating embedding:', error);\r\n        throw error;\r\n    }\r\n}\r\n\r\nexport async function getDimension(): Promise<number> {\r\n    try {\r\n        if (!openai) throw new Error('OpenAIクライアントが初期化されていません');\r\n\r\n        if (useOllamaAPI) {\r\n            return await ollamaGetDimension();\r\n        }\r\n\r\n        const response = await openai.embeddings.create({\r\n            model: currentEmbeddingModel,\r\n            input: \"テスト\",\r\n            encoding_format: \"float\"\r\n        });\r\n        const dimension = response.data?.[0]?.embedding.length;\r\n        return dimension;\r\n    } catch (error) {\r\n        console.error('Error getting model dimension:', error);\r\n        throw error;\r\n    }\r\n}\r\n\r\nexport function getCurrentConfig() {\r\n    return {\r\n        baseURL: currentBaseURL,\r\n        chatModel: currentChatModel,\r\n        embeddingModel: currentEmbeddingModel,\r\n        useOllamaAPI: useOllamaAPI\r\n    };\r\n}","import { PGlite } from \"@electric-sql/pglite\";\r\n// @ts-ignore MEMO:型エラーが発生するのでignoreしておく tsconfig.jsonを修正する必要がある？\r\nimport { vector } from \"@electric-sql/pglite/vector\";\r\n\r\n// pgvector 拡張を登録\r\nconst pglite = new PGlite({\r\n  extensions: { vector },\r\n  // dataDir: \"./data\"  // MEMO：dataDirが未指定の場合はメモリ内で動作する\r\n});\r\n\r\nexport function getPGlite(): PGlite {\r\n  return pglite;\r\n}\r\n\r\nexport async function initMemory(dimension: number) {\r\n\r\n  // ベクトル検索用の pgvector 拡張を有効化\r\n  await pglite.exec(\"CREATE EXTENSION IF NOT EXISTS vector;\");\r\n  // 検索用 memory テーブルを定義\r\n  // MEMO：vectorの次元数はモデルに依存する為、使用するモデルに合わせて変える事  \r\n  await pglite.exec(`\r\n  CREATE TABLE IF NOT EXISTS memory (\r\n    id SERIAL PRIMARY KEY,\r\n    filename TEXT,\r\n    section TEXT,\r\n    section_sequence INTEGER,\r\n    content TEXT NOT NULL,\r\n    embedding vector('${dimension}')\r\n  );\r\n  CREATE INDEX ON memory USING hnsw (embedding vector_cosine_ops);`);\r\n\r\n}\r\n\r\nexport async function insertMemory(content: string, embedding: number[], filename?: string, section?: string, sectionSequence?: number) {\r\n  const vec = JSON.stringify(embedding);\r\n  // エスケープ処理\r\n  const safeContent = content.replace(/'/g, \"''\");\r\n  const safeVec = vec.replace(/'/g, \"''\");\r\n  const safeFilename = filename ? filename.replace(/'/g, \"''\") : null;\r\n  const safeSection = section ? section.replace(/'/g, \"''\") : null;\r\n  const safeSectionSequence = sectionSequence !== undefined ? sectionSequence : null;\r\n\r\n  // 高速化の為awaitしない なんかあったら戻す\r\n  pglite.exec(\r\n    `INSERT INTO memory (filename, section, section_sequence, content, embedding) VALUES ('${safeFilename}', '${safeSection}', ${safeSectionSequence}, '${safeContent}', '${safeVec}')`);\r\n}\r\n\r\nexport async function searchMemory(embedding: number[], limit: number = 3): Promise<any[]> {\r\n  const vec = JSON.stringify(embedding);\r\n  const threshold = 0.3;  // 距離の閾値\r\n  const result = await pglite.query(`\r\n    SELECT id, filename, section, section_sequence, content, embedding, (embedding <=> '${vec}') AS distance\r\n    FROM memory\r\n    WHERE (embedding <=> '${vec}') < ${threshold}\r\n    ORDER BY distance\r\n    LIMIT ${limit};`);\r\n  return result.rows;\r\n}\r\n\r\n// ハイブリッド検索（β）\r\nexport async function hybridSearchMemory(keywords: string | string[], embedding: number[], limit: number = 3): Promise<any[]> {\r\n  const vec = JSON.stringify(embedding);\r\n  const vectorWeight = 0.5; // ベクトル検索の重み\r\n  const keywordWeight = 0.4; // キーワード検索の重み\r\n  const maxKeywordScore = 1.0; // キーワードスコアの最大値\r\n  const minCombinedScore = 0.3; // 最小結合スコア\r\n  // キーワードの処理\r\n  let keywordConditions = [];\r\n  let keywordScoreExpression = \"\";\r\n  let keywordCondition = \"\";\r\n\r\n  if (Array.isArray(keywords)) {\r\n    // 空の配列または空文字のみの配列の場合は特殊処理\r\n    if (keywords.length === 0 || keywords.every(k => k.trim() === '')) {\r\n      return searchMemory(embedding, limit);\r\n    }\r\n    // 有効なキーワードのみをフィルタリングし、重複を除去\r\n    const validKeywords = Array.from(new Set(keywords.filter(k => k.trim() !== '').map(k => k.trim().toLowerCase())));\r\n\r\n    // 各キーワードの存在をチェックする式を作成（0または1の値）\r\n    keywordConditions = validKeywords.map(k => {\r\n      const safeKeyword = k.replace(/'/g, \"''\");\r\n      return `CASE WHEN LOWER(content) LIKE '%${safeKeyword}%' THEN 1 ELSE 0 END`;\r\n    });\r\n\r\n    if (keywordConditions.length === 0) {\r\n      return searchMemory(embedding, limit);\r\n    }\r\n\r\n    // WHERE句用の条件\r\n    const whereConditions = validKeywords.map(k =>\r\n      `content ILIKE '%${k.replace(/'/g, \"''\")}%'`\r\n    );\r\n    keywordCondition = whereConditions.join(' OR ');\r\n\r\n    // キーワードスコア計算式（マッチしたキーワード数に基づく、重複なし）\r\n    keywordScoreExpression = `LEAST((${keywordConditions.join(' + ')}) * ${keywordWeight} / ${validKeywords.length}, ${maxKeywordScore})`;\r\n  } else {\r\n    // 文字列の場合\r\n    const safeKeyword = keywords.replace(/'/g, \"''\").trim().toLowerCase();\r\n    if (safeKeyword === '') {\r\n      return searchMemory(embedding, limit);\r\n    }\r\n\r\n    keywordCondition = `content ILIKE '%${safeKeyword}%'`;\r\n\r\n    // 存在ベースのスコア計算（0または1）\r\n    keywordScoreExpression = `CASE WHEN LOWER(content) LIKE '%${safeKeyword}%' THEN ${keywordWeight} ELSE 0 END`;\r\n  }\r\n  // スコア計算式を変数として定義\r\n  const combinedScoreExpression = `\r\n    CASE\r\n      WHEN ${keywordCondition} THEN ${keywordScoreExpression}\r\n      ELSE 0\r\n    END + \r\n    (${vectorWeight} * (1 - (embedding <=> '${vec}')))\r\n  `;  const result = await pglite.query(`\r\n    WITH scored_results AS (\r\n      SELECT \r\n        id, \r\n        filename,\r\n        section,\r\n        section_sequence,\r\n        content,\r\n        (embedding <=> '${vec}') AS vector_distance,\r\n        ${combinedScoreExpression} AS combined_score\r\n      FROM memory\r\n    )\r\n    SELECT id, filename, section, section_sequence, content, vector_distance, combined_score\r\n    FROM scored_results\r\n    WHERE combined_score >= ${minCombinedScore}\r\n    ORDER BY combined_score DESC\r\n    LIMIT ${limit};\r\n  `);\r\n  return result.rows;\r\n}\r\n\r\n","// セクションの型定義\r\ninterface Section {\r\n    heading: string;\r\n    content: string;\r\n}\r\n\r\nexport async function chunkFile(file: File, chunkSize: number = 1000): Promise<{ section: string, content: string, filename: string }[]> {\r\n\r\n    // 拡張子別にファイルを処理\r\n    const ext = file.name.split('.').pop()?.toLowerCase()\r\n    let text: string;\r\n    let sections: Section[] = [];\r\n    switch (ext) {\r\n        case 'txt':\r\n            text = await file.text();\r\n            sections = await chunkTxt(text, chunkSize);\r\n            break;\r\n        case 'md':\r\n            text = await file.text();\r\n            sections = await chunkMd(text, chunkSize);\r\n            break\r\n        default:\r\n            // 例外をスロー\r\n            throw new Error('対応していないファイル形式です。: ' + ext);\r\n    }\r\n\r\n    // セクションとファイル名のペアを返す\r\n    return sections.map(section => ({\r\n        section: section.heading,\r\n        content: section.content,\r\n        filename: file.name\r\n    }));\r\n}\r\n\r\nasync function chunkTxt(text: string, chunkSize: number): Promise<Section[]> {\r\n    // splitLongContentを使用してテキストを分割\r\n    return splitLongContent('# 無題', text, chunkSize);\r\n}\r\n\r\nasync function chunkMd(text: string, chunkSize: number): Promise<Section[]> {\r\n    const sections: Section[] = [];\r\n\r\n    // テキストを「# 」で始まる行で分割\r\n    const lines = text.split(/\\r?\\n/);\r\n    let currentHeading = '';\r\n    let currentContent: string[] = [];\r\n\r\n    for (const line of lines) {\r\n        if (line.startsWith('# ')) {\r\n            // 前のセクションを保存（存在する場合）\r\n            if (currentHeading) {\r\n                const content = currentContent.join('\\n').trim();\r\n                // セクション内容が長い場合は分割\r\n                const splitSections = splitLongContent(currentHeading, content, chunkSize);\r\n                sections.push(...splitSections);\r\n            }\r\n\r\n            // 新しいセクション開始\r\n            currentHeading = line;\r\n            currentContent = [];\r\n        } else {\r\n            // 現在のセクションにコンテンツを追加\r\n            currentContent.push(line);\r\n        }\r\n    }\r\n\r\n    // 最後のセクションを保存\r\n    if (currentHeading) {\r\n        const content = currentContent.join('\\n').trim();\r\n        const splitSections = splitLongContent(currentHeading, content, chunkSize);\r\n        sections.push(...splitSections);\r\n    }\r\n\r\n    // 見出しのないコンテンツがある場合の処理\r\n    if (!currentHeading && currentContent.length > 0) {\r\n        const content = currentContent.join('\\n').trim();\r\n        if (content) {\r\n            const splitSections = splitLongContent('# 無題', content, chunkSize);\r\n            sections.push(...splitSections);\r\n        }\r\n    }\r\n\r\n    return sections;\r\n}\r\n\r\n// 長いコンテンツを指定されたサイズで分割する関数\r\nfunction splitLongContent(heading: string, content: string, chunkSize: number): Section[] {\r\n    if (content.length <= chunkSize) {\r\n        return [{\r\n            heading: heading,\r\n            content: content\r\n        }];\r\n    }\r\n\r\n    const sections: Section[] = [];\r\n    const lines = content.split('\\n');\r\n    let currentChunk = '';\r\n\r\n    for (const line of lines) {\r\n        if (currentChunk.length + line.length + 1 > chunkSize) {\r\n            // 現在のチャンクがchunkSizeを超える場合、チャンクを保存\r\n            if (currentChunk.trim()) {\r\n                sections.push({\r\n                    heading: heading,\r\n                    content: currentChunk.trim()\r\n                });\r\n            }\r\n            currentChunk = line; // 新しいチャンクを開始\r\n        } else {\r\n            // 現在のチャンクに行を追加\r\n            currentChunk += (currentChunk ? '\\n' : '') + line;\r\n        }\r\n    }\r\n\r\n    // 最後のチャンクを保存\r\n    if (currentChunk.trim()) {\r\n        sections.push({\r\n            heading: heading,\r\n            content: currentChunk.trim()\r\n        });\r\n    }\r\n\r\n    return sections;\r\n}\r\n","import { defineStore } from 'pinia'\r\nimport { MessageData, SendMessage, State } from '@/models/chatMessage'\r\nimport { generateKeyWord, streamChatMessage, generateEmbedding } from '@/utils/openAI'\r\nimport { insertMemory, searchMemory, hybridSearchMemory } from '@/utils/pglite'\r\nimport { chunkFile } from '@/utils/chunkFile'\r\nimport { extractKeywords } from '@/utils/segment'\r\n\r\nexport const useChatStore = defineStore(\r\n    'chat',\r\n    {\r\n        state: (): State => ({\r\n            messageList: new Map<number, MessageData>(),\r\n            isLoading: false\r\n        }),\r\n        getters: {},\r\n        actions: {\r\n            // ユーザの入力したメッセージをmessageListに追加\r\n            addMessage(question: string, isBot: boolean = false) {\r\n                const setId = this.messageList.size + 1\r\n                this.messageList.set(setId, {\r\n                    id: setId,\r\n                    message: question,\r\n                    isBot: isBot\r\n                })\r\n            },\r\n            // ボットから回答を受けメッセージを追加\r\n            async getBotReply(question: string) {\r\n                // バルーン作成\r\n                const setId = this.messageList.size + 1\r\n                const startTime = Date.now()\r\n                this.messageList.set(setId, {\r\n                    id: setId,\r\n                    message: '',\r\n                    isBot: true,\r\n                    isStreaming: true,\r\n                    streamingStartTime: startTime\r\n                })\r\n                // 質問をセグメント化し、キーワードを作成\r\n                const keywordsCSV = await generateKeyWord(question)\r\n                console.log('Generated keywords:', keywordsCSV)\r\n                // キーワードをカンマ区切りで分割\r\n                const keywords = keywordsCSV.split(',').map(k => k.trim().replace(/^\"|\"$/g, ''))\r\n                // 質問をベクトル化\r\n                const vectorQuestion = await generateEmbedding(question)\r\n                    .catch((reason) => {\r\n                        errorHandler(reason)\r\n                        return []\r\n                    })\r\n                // キーワードと質問のベクトルから参考情報を取得\r\n                const memory = await hybridSearchMemory(keywords, vectorQuestion)\r\n                    .catch((reason) => {\r\n                        errorHandler(reason)\r\n                        return []\r\n                    })\r\n                console.log('searchMemory result:', memory)\r\n\r\n                // チャット履歴を構築（最新の10件のメッセージまで）\r\n                const chatHistory: any[] = []\r\n                const messageArray = Array.from(this.messageList.values())\r\n                    .sort((a, b) => a.id - b.id)\r\n                    .slice(-10) // 最新10件まで\r\n\r\n                for (const msg of messageArray) {\r\n                    chatHistory.push({\r\n                        role: msg.isBot ? 'assistant' : 'user',\r\n                        content: msg.message\r\n                    })\r\n                } try {\r\n                    // 質問・参考情報・チャット履歴を元に回答を作成\r\n                    for await (const chunk of streamChatMessage(question, memory, chatHistory)) {\r\n                        // 応答をストリーミング出力\r\n                        const prev = this.messageList.get(setId)?.message || ''\r\n                        this.messageList.set(setId, {\r\n                            id: setId,\r\n                            message: prev + chunk,\r\n                            isBot: true,\r\n                            isStreaming: false,\r\n                            streamingStartTime: undefined,\r\n                            responseTime: (Date.now() - startTime) / 1000\r\n                        })\r\n                    }\r\n                } catch (reason) {\r\n                    errorHandler(reason)\r\n                    // エラー時もストリーミング状態を解除\r\n                    const currentMessage = this.messageList.get(setId)\r\n                    if (currentMessage) {\r\n                        this.messageList.set(setId, {\r\n                            ...currentMessage,\r\n                            isStreaming: false,\r\n                            streamingStartTime: undefined,\r\n                            responseTime: (Date.now() - startTime) / 1000\r\n                        })\r\n                    }\r\n                } finally {\r\n                    this.isLoading = false\r\n                }\r\n            },\r\n            // 参考情報のアップロード\r\n            async uploadFile(file: File) {\r\n                // アップロード用のメッセージバルーンを作成\r\n                const setId = this.messageList.size + 1\r\n                const startTime = Date.now()\r\n                this.messageList.set(setId, {\r\n                    id: setId,\r\n                    message: '',\r\n                    isBot: true,\r\n                    isStreaming: true,\r\n                    streamingStartTime: startTime,\r\n                    isFileUpload: true\r\n                })\r\n                try {\r\n                    // ファイルをチャンクに分割\r\n                    const chunks = await chunkFile(file, 500)\r\n                        .catch((reason) => {\r\n                            errorHandler(reason)\r\n                            return []\r\n                        })\r\n                    // セクションごとの連番を管理するMap\r\n                    const sectionSequenceMap = new Map<string, number>()\r\n                    // チャンク単位でベクトル化し、pgliteに保存\r\n                    for (const chunk of chunks) {\r\n                        console.log('Processing chunk:', chunk.content)\r\n                        const vectorchunk = await generateEmbedding(chunk.content)\r\n                            .catch((reason) => errorHandler(reason))\r\n                        if (vectorchunk) {\r\n                            // セクションの連番を取得または初期化\r\n                            const sectionKey = `${chunk.filename || 'unknown'}_${chunk.section || 'unknown'}`\r\n                            const sectionSequence = sectionSequenceMap.get(sectionKey) || 0\r\n                            \r\n                            await insertMemory(chunk.content, vectorchunk, chunk.filename, chunk.section, sectionSequence)\r\n                                .catch((reason) => errorHandler(reason))\r\n                            \r\n                            // 次回用に連番をインクリメント\r\n                            sectionSequenceMap.set(sectionKey, sectionSequence + 1)\r\n                        }\r\n                    }// 完了メッセージに更新\r\n                    this.messageList.set(setId, {\r\n                        id: setId,\r\n                        message: 'ファイルのアップロードが完了しました。',\r\n                        isBot: true,\r\n                        isStreaming: false,\r\n                        streamingStartTime: undefined,\r\n                        responseTime: (Date.now() - startTime) / 1000,\r\n                        isFileUpload: true\r\n                    })\r\n                } catch (reason) {\r\n                    errorHandler(reason)\r\n                    // エラー時もストリーミング状態を解除\r\n                    const currentMessage = this.messageList.get(setId)\r\n                    if (currentMessage) {\r\n                        this.messageList.set(setId, {\r\n                            ...currentMessage,\r\n                            message: 'ファイルのアップロードに失敗しました。',\r\n                            isStreaming: false,\r\n                            streamingStartTime: undefined,\r\n                            responseTime: (Date.now() - startTime) / 1000,\r\n                            isFileUpload: true\r\n                        })\r\n                    }\r\n                } finally {\r\n                    this.isLoading = false\r\n                }\r\n            }\r\n        }\r\n    })\r\n\r\nconst errorHandler = (error: unknown) => {\r\n    if (error instanceof Error) {\r\n        console.error(error.message, error.stack)\r\n    } else {\r\n        console.error('Error occured.', error)\r\n    }\r\n}","import { defineComponent as _defineComponent } from 'vue'\nimport { createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, withModifiers as _withModifiers, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\"\n\nconst _hoisted_1 = { class: \"file-upload-label\" }\nconst _hoisted_2 = [\"disabled\"]\nconst _hoisted_3 = [\"disabled\"]\n\nimport '@/assets/main.css'\r\nimport { ref, computed, onUpdated } from 'vue'\r\nimport { useChatStore } from '@/stores/chatMessage'\r\n\r\n\nexport default /*@__PURE__*/_defineComponent({\n  __name: 'ChatForm',\n  setup(__props) {\n\r\nconst chatStore = useChatStore()\r\n\r\nconst sendMessage = ref('')\r\nconst uploadedFile = ref<File | null>(null)\r\nconst fileInputRef = ref<HTMLInputElement | null>(null)\r\n\r\nconst isLoading = computed((): boolean => {\r\n    return chatStore.isLoading\r\n})\r\n\r\nconst onSendMessage = (): void => {\r\n    chatStore.isLoading = true\r\n    chatStore.addMessage(sendMessage.value)\r\n    chatStore.getBotReply(sendMessage.value)\r\n    sendMessage.value = ''\r\n}\r\n\r\nconst onFileButtonClick = () => {\r\n    fileInputRef.value?.click()\r\n}\r\n\r\nconst onFileChange = async (event: Event) => {\r\n    const target = event.target as HTMLInputElement\r\n    if (target.files && target.files.length > 0) {\r\n        uploadedFile.value = target.files[0]\r\n        chatStore.isLoading = true\r\n        chatStore.addMessage(`ファイルを参考情報としてロードします。: ${uploadedFile.value.name}`, true)\r\n        await chatStore.uploadFile(uploadedFile.value)\r\n        uploadedFile.value = null\r\n    }\r\n}\r\n\r\nonUpdated((): void => {\r\n    window.scrollTo({\r\n        top: document.body.scrollHeight,\r\n        behavior: 'smooth'\r\n    })\r\n})\r\n\nreturn (_ctx: any,_cache: any) => {\n  return (_openBlock(), _createElementBlock(\"form\", {\n    onSubmit: _withModifiers(onSendMessage, [\"prevent\"]),\n    class: \"send-form\"\n  }, [\n    _createElementVNode(\"label\", _hoisted_1, [\n      _createElementVNode(\"input\", {\n        ref_key: \"fileInputRef\",\n        ref: fileInputRef,\n        type: \"file\",\n        onChange: onFileChange,\n        class: \"file-input\",\n        style: {\"display\":\"none\"}\n      }, null, 544),\n      _createElementVNode(\"button\", {\n        type: \"button\",\n        onClick: onFileButtonClick,\n        disabled: isLoading.value,\n        class: \"submit-btn\"\n      }, \"RAG追加\", 8, _hoisted_2)\n    ]),\n    _withDirectives(_createElementVNode(\"input\", {\n      type: \"text\",\n      id: \"sendMessage\",\n      \"onUpdate:modelValue\": _cache[0] || (_cache[0] = ($event: any) => ((sendMessage).value = $event)),\n      required: \"\",\n      class: \"input-text\"\n    }, null, 512), [\n      [_vModelText, sendMessage.value]\n    ]),\n    _createElementVNode(\"button\", {\n      type: \"submit\",\n      disabled: isLoading.value,\n      class: \"submit-btn\"\n    }, \"送信\", 8, _hoisted_3)\n  ], 32))\n}\n}\n\n})","<script setup lang=\"ts\">\r\nimport '@/assets/main.css'\r\nimport { ref, computed, onUpdated } from 'vue'\r\nimport { useChatStore } from '@/stores/chatMessage'\r\n\r\nconst chatStore = useChatStore()\r\n\r\nconst sendMessage = ref('')\r\nconst uploadedFile = ref<File | null>(null)\r\nconst fileInputRef = ref<HTMLInputElement | null>(null)\r\n\r\nconst isLoading = computed((): boolean => {\r\n    return chatStore.isLoading\r\n})\r\n\r\nconst onSendMessage = (): void => {\r\n    chatStore.isLoading = true\r\n    chatStore.addMessage(sendMessage.value)\r\n    chatStore.getBotReply(sendMessage.value)\r\n    sendMessage.value = ''\r\n}\r\n\r\nconst onFileButtonClick = () => {\r\n    fileInputRef.value?.click()\r\n}\r\n\r\nconst onFileChange = async (event: Event) => {\r\n    const target = event.target as HTMLInputElement\r\n    if (target.files && target.files.length > 0) {\r\n        uploadedFile.value = target.files[0]\r\n        chatStore.isLoading = true\r\n        chatStore.addMessage(`ファイルを参考情報としてロードします。: ${uploadedFile.value.name}`, true)\r\n        await chatStore.uploadFile(uploadedFile.value)\r\n        uploadedFile.value = null\r\n    }\r\n}\r\n\r\nonUpdated((): void => {\r\n    window.scrollTo({\r\n        top: document.body.scrollHeight,\r\n        behavior: 'smooth'\r\n    })\r\n})\r\n</script>\r\n\r\n<template>\r\n    <form v-on:submit.prevent=\"onSendMessage\" class=\"send-form\">\r\n        <label class=\"file-upload-label\">\r\n            <input ref=\"fileInputRef\" type=\"file\" @change=\"onFileChange\" class=\"file-input\" style=\"display:none\" />\r\n            <button type=\"button\" @click=\"onFileButtonClick\" :disabled=\"isLoading\" class=\"submit-btn\">RAG追加</button>\r\n        </label>\r\n        <input type=\"text\" id=\"sendMessage\" v-model=\"sendMessage\" required class=\"input-text\" />\r\n        <button type=\"submit\" v-bind:disabled=\"isLoading\" class=\"submit-btn\">送信</button>\r\n    </form>\r\n</template>\r\n\r\n<style>\r\n</style>","import script from \"./ChatForm.vue?vue&type=script&setup=true&lang=ts\"\nexport * from \"./ChatForm.vue?vue&type=script&setup=true&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { defineComponent as _defineComponent } from 'vue'\nimport { openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, vModelCheckbox as _vModelCheckbox, createTextVNode as _createTextVNode, Fragment as _Fragment, normalizeClass as _normalizeClass, renderList as _renderList, toDisplayString as _toDisplayString, createVNode as _createVNode } from \"vue\"\n\nconst _hoisted_1 = { class: \"container\" }\nconst _hoisted_2 = { key: 0 }\nconst _hoisted_3 = { key: 1 }\nconst _hoisted_4 = { style: {\"margin-top\":\"8px\"} }\nconst _hoisted_5 = {\n  for: \"useOllamaAPI-checkbox\",\n  class: \"sidebar-label\"\n}\nconst _hoisted_6 = { class: \"messages-container\" }\nconst _hoisted_7 = {\n  key: 0,\n  class: \"bot-message\"\n}\nconst _hoisted_8 = {\n  key: 0,\n  class: \"loading-container\"\n}\nconst _hoisted_9 = { class: \"loading-text\" }\nconst _hoisted_10 = {\n  key: 0,\n  class: \"loading-timer\"\n}\nconst _hoisted_11 = { key: 1 }\nconst _hoisted_12 = [\"innerHTML\"]\nconst _hoisted_13 = {\n  key: 0,\n  class: \"response-time\"\n}\nconst _hoisted_14 = {\n  key: 1,\n  class: \"user-message\"\n}\nconst _hoisted_15 = {\n  key: 0,\n  class: \"chat-form-bottom\"\n}\n\nimport '@/assets/main.css'\r\nimport { computed, nextTick, onMounted, onUnmounted, ref, watch } from 'vue'\r\nimport { useChatStore } from '@/stores/chatMessage'\r\nimport { MessageData } from '@/models/chatMessage'\r\nimport ChatForm from '@/components/ChatForm.vue'\r\nimport { initMemory } from '@/utils/pglite'\r\nimport { getDimension, getCurrentConfig, setOpenAIConfig } from '@/utils/openAI'\r\n//import { generateEmbedding } from '@/utils/openAI'\r\n\r\n\nexport default /*@__PURE__*/_defineComponent({\n  __name: 'BotBox',\n  setup(__props) {\n\r\nconst chatStore = useChatStore()\r\nconst messageList = computed((): Map<number, MessageData> => {\r\n    return chatStore.messageList\r\n})\r\n\r\nconst initialized = ref(false);\r\nconst containerRef = ref<HTMLElement | null>(null);\r\nconst currentTime = ref(Date.now());\r\n\r\n// リアルタイムで現在時刻を更新するタイマー\r\nlet timeUpdateInterval: number | null = null;\r\n\r\nonMounted(() => {\r\n    timeUpdateInterval = setInterval(() => {\r\n        currentTime.value = Date.now();\r\n    }, 100); // 100msごとに更新\r\n});\r\n\r\nonUnmounted(() => {\r\n    if (timeUpdateInterval) {\r\n        clearInterval(timeUpdateInterval);\r\n    }\r\n});\r\n\r\n// 経過時間を計算する関数\r\nconst getElapsedTime = (startTime: number): string => {\r\n    const elapsed = (currentTime.value - startTime) / 1000;\r\n    return elapsed.toFixed(1);\r\n};\r\n\r\n// ローディングテキストを判定する関数\r\nconst getLoadingText = (message: MessageData): string => {\r\n    return message.isFileUpload ? 'ファイルをアップロードしています...' : '回答を生成中...';\r\n};\r\n\r\nconst scrollToBottom = () => {\r\n    if (containerRef.value) {\r\n        const messagesContainer = containerRef.value.querySelector('.messages-container');\r\n        if (messagesContainer) {\r\n            messagesContainer.scrollTop = messagesContainer.scrollHeight;\r\n        }\r\n    }\r\n}\r\n\r\n// baseURL, chatModel, embeddingModelの編集用（localStorage対応）\r\nfunction loadConfigFromStorage() {\r\n    const saved = localStorage.getItem('openai_config')\r\n    if (saved) {\r\n        try {\r\n            return JSON.parse(saved)\r\n        } catch { /* ignore */ }\r\n    }\r\n    return getCurrentConfig()\r\n}\r\nconst config = ref(loadConfigFromStorage())\r\n\r\n// サイドバーの開閉状態\r\nconst sidebarOpen = ref(true)\r\nfunction toggleSidebar() {\r\n    sidebarOpen.value = !sidebarOpen.value\r\n}\r\n\r\nwatch(config, (val) => {\r\n    localStorage.setItem('openai_config', JSON.stringify(val))\r\n}, { deep: true })\r\n\r\nfunction updateConfig() {\r\n    setOpenAIConfig({\r\n        baseURL: config.value.baseURL,\r\n        chatModel: config.value.chatModel,\r\n        embeddingModel: config.value.embeddingModel,\r\n        useOllamaAPI: config.value.useOllamaAPI\r\n    })\r\n    localStorage.setItem('openai_config', JSON.stringify(config.value))\r\n    window.alert('設定を更新しました')\r\n    window.location.reload()\r\n}\r\n\r\n// openAI.tsのデフォルト値を取得するための定数\r\nconst defaultConfig = getCurrentConfig();\r\n\r\nfunction resetConfig() {\r\n    config.value = { ...defaultConfig };\r\n    setOpenAIConfig({\r\n        ...defaultConfig,\r\n        useOllamaAPI: defaultConfig.useOllamaAPI\r\n    });\r\n    localStorage.setItem('openai_config', JSON.stringify(defaultConfig));\r\n    window.alert('デフォルト設定に戻しました');\r\n    window.location.reload();\r\n}\r\n\r\n// 初期化処理\r\nonMounted(() => {\r\n    // 設定を反映\r\n    setOpenAIConfig({\r\n        baseURL: config.value.baseURL,\r\n        chatModel: config.value.chatModel,\r\n        embeddingModel: config.value.embeddingModel,\r\n        useOllamaAPI: config.value.useOllamaAPI\r\n    })\r\n    // embeddingModelの次元数を取得\r\n    getDimension().then((dimension) => {\r\n        console.log('Embedding dimension:', dimension);\r\n        // PGliteの初期化\r\n        initMemory(dimension).then(() => {\r\n            console.log('Memory initialized successfully.');\r\n            initialized.value = true;\r\n        }).catch((error) => {\r\n            console.error('Error initializing memory:', error);\r\n            window.alert('Memory initialization failed. Please check the console for details.');\r\n        });\r\n    }).catch((error) => {\r\n        console.error('Error getting embedding dimension:', error);\r\n        window.alert('Embedding model initialization failed. Please check the console for details.');\r\n    });\r\n})\r\n\r\n// メッセージリストの変更を監視して自動スクロール\r\nwatch(messageList, () => {\r\n    // DOMの更新後にスクロールを実行するため、nextTickを使用\r\n    nextTick(() => {\r\n        scrollToBottom();\r\n    });\r\n}, { deep: true });\r\n\r\n// メッセージのフォーマット関数\r\nfunction formatMessage(msg: string): string {\r\n    return msg.replace(/\\n/g, '<br>');\r\n}\r\n\nreturn (_ctx: any,_cache: any) => {\n  return (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [\n    _createElementVNode(\"div\", {\n      class: _normalizeClass([\"sidebar\", { closed: !sidebarOpen.value }])\n    }, [\n      _createElementVNode(\"button\", {\n        class: \"sidebar-toggle\",\n        onClick: toggleSidebar\n      }, [\n        (sidebarOpen.value)\n          ? (_openBlock(), _createElementBlock(\"span\", _hoisted_2, \"＜\"))\n          : (_openBlock(), _createElementBlock(\"span\", _hoisted_3, \"≡\"))\n      ]),\n      _cache[8] || (_cache[8] = _createTextVNode()),\n      (sidebarOpen.value)\n        ? (_openBlock(), _createElementBlock(_Fragment, { key: 0 }, [\n            _cache[5] || (_cache[5] = _createElementVNode(\"label\", {\n              for: \"baseURL-input\",\n              class: \"sidebar-label\"\n            }, \"ollama baseURL:\", -1)),\n            _withDirectives(_createElementVNode(\"input\", {\n              id: \"baseURL-input\",\n              \"onUpdate:modelValue\": _cache[0] || (_cache[0] = ($event: any) => ((config.value.baseURL) = $event)),\n              class: \"sidebar-input\"\n            }, null, 512), [\n              [_vModelText, config.value.baseURL]\n            ]),\n            _cache[6] || (_cache[6] = _createElementVNode(\"label\", {\n              for: \"chatModel-input\",\n              class: \"sidebar-label\"\n            }, \"chatModel:\", -1)),\n            _withDirectives(_createElementVNode(\"input\", {\n              id: \"chatModel-input\",\n              \"onUpdate:modelValue\": _cache[1] || (_cache[1] = ($event: any) => ((config.value.chatModel) = $event)),\n              class: \"sidebar-input\"\n            }, null, 512), [\n              [_vModelText, config.value.chatModel]\n            ]),\n            _cache[7] || (_cache[7] = _createElementVNode(\"label\", {\n              for: \"embeddingModel-input\",\n              class: \"sidebar-label\"\n            }, \"embeddingModel:\", -1)),\n            _withDirectives(_createElementVNode(\"input\", {\n              id: \"embeddingModel-input\",\n              \"onUpdate:modelValue\": _cache[2] || (_cache[2] = ($event: any) => ((config.value.embeddingModel) = $event)),\n              class: \"sidebar-input\"\n            }, null, 512), [\n              [_vModelText, config.value.embeddingModel]\n            ]),\n            _createElementVNode(\"div\", _hoisted_4, [\n              _createElementVNode(\"label\", _hoisted_5, [\n                _withDirectives(_createElementVNode(\"input\", {\n                  id: \"useOllamaAPI-checkbox\",\n                  \"onUpdate:modelValue\": _cache[3] || (_cache[3] = ($event: any) => ((config.value.useOllamaAPI) = $event)),\n                  type: \"checkbox\",\n                  style: {\"margin-right\":\"8px\"}\n                }, null, 512), [\n                  [_vModelCheckbox, config.value.useOllamaAPI]\n                ]),\n                _cache[4] || (_cache[4] = _createTextVNode(\" OllamaAPI使用 \"))\n              ])\n            ]),\n            _createElementVNode(\"div\", { style: {\"margin-top\":\"8px\",\"display\":\"flex\",\"justify-content\":\"space-between\"} }, [\n              _createElementVNode(\"button\", {\n                onClick: resetConfig,\n                class: \"config-btn reset-btn\",\n                title: \"デフォルト設定に戻します\"\n              }, \"リセット\"),\n              _createElementVNode(\"button\", {\n                onClick: updateConfig,\n                class: \"config-btn\",\n                title: \"設定を適用します\"\n              }, \"適用\")\n            ])\n          ], 64))\n        : _createCommentVNode(\"\", true)\n    ], 2),\n    _createElementVNode(\"div\", {\n      class: \"main-content\",\n      ref_key: \"containerRef\",\n      ref: containerRef\n    }, [\n      _createElementVNode(\"div\", _hoisted_6, [\n        (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(messageList.value, ([id, message]) => {\n          return (_openBlock(), _createElementBlock(\"div\", {\n            key: id,\n            class: _normalizeClass([\"message-wrapper\", { user: !message.isBot }])\n          }, [\n            (message.isBot)\n              ? (_openBlock(), _createElementBlock(\"div\", _hoisted_7, [\n                  (message.isStreaming && !message.message)\n                    ? (_openBlock(), _createElementBlock(\"div\", _hoisted_8, [\n                        _cache[9] || (_cache[9] = _createElementVNode(\"div\", { class: \"loading-spinner\" }, null, -1)),\n                        _createElementVNode(\"span\", _hoisted_9, [\n                          _createTextVNode(_toDisplayString(getLoadingText(message)) + \" \", 1),\n                          (message.streamingStartTime)\n                            ? (_openBlock(), _createElementBlock(\"span\", _hoisted_10, \" (\" + _toDisplayString(getElapsedTime(message.streamingStartTime)) + \"秒) \", 1))\n                            : _createCommentVNode(\"\", true)\n                        ])\n                      ]))\n                    : (_openBlock(), _createElementBlock(\"div\", _hoisted_11, [\n                        _createElementVNode(\"div\", {\n                          innerHTML: formatMessage(message.message)\n                        }, null, 8, _hoisted_12),\n                        (message.responseTime)\n                          ? (_openBlock(), _createElementBlock(\"div\", _hoisted_13, \" (応答時間: \" + _toDisplayString(message.responseTime.toFixed(1)) + \"秒) \", 1))\n                          : _createCommentVNode(\"\", true)\n                      ]))\n                ]))\n              : (_openBlock(), _createElementBlock(\"div\", _hoisted_14, _toDisplayString(message.message), 1))\n          ], 2))\n        }), 128))\n      ]),\n      (initialized.value)\n        ? (_openBlock(), _createElementBlock(\"div\", _hoisted_15, [\n            _createVNode(ChatForm)\n          ]))\n        : _createCommentVNode(\"\", true)\n    ], 512)\n  ]))\n}\n}\n\n})","<script setup lang=\"ts\">\r\nimport '@/assets/main.css'\r\nimport { computed, nextTick, onMounted, onUnmounted, ref, watch } from 'vue'\r\nimport { useChatStore } from '@/stores/chatMessage'\r\nimport { MessageData } from '@/models/chatMessage'\r\nimport ChatForm from '@/components/ChatForm.vue'\r\nimport { initMemory } from '@/utils/pglite'\r\nimport { getDimension, getCurrentConfig, setOpenAIConfig } from '@/utils/openAI'\r\n//import { generateEmbedding } from '@/utils/openAI'\r\n\r\nconst chatStore = useChatStore()\r\nconst messageList = computed((): Map<number, MessageData> => {\r\n    return chatStore.messageList\r\n})\r\n\r\nconst initialized = ref(false);\r\nconst containerRef = ref<HTMLElement | null>(null);\r\nconst currentTime = ref(Date.now());\r\n\r\n// リアルタイムで現在時刻を更新するタイマー\r\nlet timeUpdateInterval: number | null = null;\r\n\r\nonMounted(() => {\r\n    timeUpdateInterval = setInterval(() => {\r\n        currentTime.value = Date.now();\r\n    }, 100); // 100msごとに更新\r\n});\r\n\r\nonUnmounted(() => {\r\n    if (timeUpdateInterval) {\r\n        clearInterval(timeUpdateInterval);\r\n    }\r\n});\r\n\r\n// 経過時間を計算する関数\r\nconst getElapsedTime = (startTime: number): string => {\r\n    const elapsed = (currentTime.value - startTime) / 1000;\r\n    return elapsed.toFixed(1);\r\n};\r\n\r\n// ローディングテキストを判定する関数\r\nconst getLoadingText = (message: MessageData): string => {\r\n    return message.isFileUpload ? 'ファイルをアップロードしています...' : '回答を生成中...';\r\n};\r\n\r\nconst scrollToBottom = () => {\r\n    if (containerRef.value) {\r\n        const messagesContainer = containerRef.value.querySelector('.messages-container');\r\n        if (messagesContainer) {\r\n            messagesContainer.scrollTop = messagesContainer.scrollHeight;\r\n        }\r\n    }\r\n}\r\n\r\n// baseURL, chatModel, embeddingModelの編集用（localStorage対応）\r\nfunction loadConfigFromStorage() {\r\n    const saved = localStorage.getItem('openai_config')\r\n    if (saved) {\r\n        try {\r\n            return JSON.parse(saved)\r\n        } catch { /* ignore */ }\r\n    }\r\n    return getCurrentConfig()\r\n}\r\nconst config = ref(loadConfigFromStorage())\r\n\r\n// サイドバーの開閉状態\r\nconst sidebarOpen = ref(true)\r\nfunction toggleSidebar() {\r\n    sidebarOpen.value = !sidebarOpen.value\r\n}\r\n\r\nwatch(config, (val) => {\r\n    localStorage.setItem('openai_config', JSON.stringify(val))\r\n}, { deep: true })\r\n\r\nfunction updateConfig() {\r\n    setOpenAIConfig({\r\n        baseURL: config.value.baseURL,\r\n        chatModel: config.value.chatModel,\r\n        embeddingModel: config.value.embeddingModel,\r\n        useOllamaAPI: config.value.useOllamaAPI\r\n    })\r\n    localStorage.setItem('openai_config', JSON.stringify(config.value))\r\n    window.alert('設定を更新しました')\r\n    window.location.reload()\r\n}\r\n\r\n// openAI.tsのデフォルト値を取得するための定数\r\nconst defaultConfig = getCurrentConfig();\r\n\r\nfunction resetConfig() {\r\n    config.value = { ...defaultConfig };\r\n    setOpenAIConfig({\r\n        ...defaultConfig,\r\n        useOllamaAPI: defaultConfig.useOllamaAPI\r\n    });\r\n    localStorage.setItem('openai_config', JSON.stringify(defaultConfig));\r\n    window.alert('デフォルト設定に戻しました');\r\n    window.location.reload();\r\n}\r\n\r\n// 初期化処理\r\nonMounted(() => {\r\n    // 設定を反映\r\n    setOpenAIConfig({\r\n        baseURL: config.value.baseURL,\r\n        chatModel: config.value.chatModel,\r\n        embeddingModel: config.value.embeddingModel,\r\n        useOllamaAPI: config.value.useOllamaAPI\r\n    })\r\n    // embeddingModelの次元数を取得\r\n    getDimension().then((dimension) => {\r\n        console.log('Embedding dimension:', dimension);\r\n        // PGliteの初期化\r\n        initMemory(dimension).then(() => {\r\n            console.log('Memory initialized successfully.');\r\n            initialized.value = true;\r\n        }).catch((error) => {\r\n            console.error('Error initializing memory:', error);\r\n            window.alert('Memory initialization failed. Please check the console for details.');\r\n        });\r\n    }).catch((error) => {\r\n        console.error('Error getting embedding dimension:', error);\r\n        window.alert('Embedding model initialization failed. Please check the console for details.');\r\n    });\r\n})\r\n\r\n// メッセージリストの変更を監視して自動スクロール\r\nwatch(messageList, () => {\r\n    // DOMの更新後にスクロールを実行するため、nextTickを使用\r\n    nextTick(() => {\r\n        scrollToBottom();\r\n    });\r\n}, { deep: true });\r\n\r\n// メッセージのフォーマット関数\r\nfunction formatMessage(msg: string): string {\r\n    return msg.replace(/\\n/g, '<br>');\r\n}\r\n</script>\r\n\r\n<template>\r\n    <div class=\"container\">\r\n        <!-- サイドバー（設定UI） -->\r\n        <div class=\"sidebar\" :class=\"{ closed: !sidebarOpen }\">\r\n            <button class=\"sidebar-toggle\" @click=\"toggleSidebar\">\r\n                <span v-if=\"sidebarOpen\">＜</span>\r\n                <span v-else>≡</span>\r\n            </button> <template v-if=\"sidebarOpen\">\r\n                <label for=\"baseURL-input\" class=\"sidebar-label\">ollama baseURL:</label>\r\n                <input id=\"baseURL-input\" v-model=\"config.baseURL\" class=\"sidebar-input\" />\r\n                <label for=\"chatModel-input\" class=\"sidebar-label\">chatModel:</label>\r\n                <input id=\"chatModel-input\" v-model=\"config.chatModel\" class=\"sidebar-input\" />\r\n                <label for=\"embeddingModel-input\" class=\"sidebar-label\">embeddingModel:</label>\r\n                <input id=\"embeddingModel-input\" v-model=\"config.embeddingModel\" class=\"sidebar-input\" />\r\n                <div style=\"margin-top: 8px;\">\r\n                    <label for=\"useOllamaAPI-checkbox\" class=\"sidebar-label\">\r\n                        <input id=\"useOllamaAPI-checkbox\" v-model=\"config.useOllamaAPI\" type=\"checkbox\"\r\n                            style=\"margin-right: 8px;\" />\r\n                        OllamaAPI使用\r\n                    </label>\r\n                </div>\r\n                <div style=\"margin-top: 8px; display: flex; justify-content: space-between;\">\r\n                    <button @click=\"resetConfig\" class=\"config-btn reset-btn\" title=\"デフォルト設定に戻します\">リセット</button>\r\n                    <button @click=\"updateConfig\" class=\"config-btn\" title=\"設定を適用します\">適用</button>\r\n                </div>\r\n            </template>\r\n        </div>\r\n        <!-- メインコンテンツ（チャット） -->\r\n        <div class=\"main-content\" ref=\"containerRef\">            <div class=\"messages-container\">\r\n                <template v-for=\"[id, message] in messageList\" v-bind:key=\"id\">\r\n                    <div class=\"message-wrapper\" :class=\"{ user: !message.isBot }\">                        <div v-if=\"message.isBot\" class=\"bot-message\">\r\n                            <!-- ローディング中の表示 -->                            <div v-if=\"message.isStreaming && !message.message\" class=\"loading-container\">\r\n                                <div class=\"loading-spinner\"></div>\r\n                                <span class=\"loading-text\">\r\n                                    {{ getLoadingText(message) }}\r\n                                    <span v-if=\"message.streamingStartTime\" class=\"loading-timer\">\r\n                                        ({{ getElapsedTime(message.streamingStartTime) }}秒)\r\n                                    </span>\r\n                                </span>\r\n                            </div><!-- メッセージ内容 -->\r\n                            <div v-else>\r\n                                <div v-html=\"formatMessage(message.message)\"></div>\r\n                                <div v-if=\"message.responseTime\" class=\"response-time\">\r\n                                    (応答時間: {{ message.responseTime.toFixed(1) }}秒)\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div v-else class=\"user-message\">{{ message.message }}</div>\r\n                    </div>\r\n                </template>\r\n            </div>\r\n            <!-- チャットフォーム（画面下部） -->\r\n            <div class=\"chat-form-bottom\" v-if=\"initialized\">\r\n                <ChatForm />\r\n            </div>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<style>\r\n</style>","import script from \"./BotBox.vue?vue&type=script&setup=true&lang=ts\"\nexport * from \"./BotBox.vue?vue&type=script&setup=true&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","/// <reference types=\"vite/client\" />\r\n\r\nimport { createRouter, createWebHashHistory } from 'vue-router'\r\nimport type { RouteRecordRaw } from 'vue-router'\r\nimport BotBox from '@/views/BotBox.vue'\r\n\r\nconst routes = [\r\n  { path: '/', name: 'Top', component: BotBox }\r\n]\r\n\r\nconst router = createRouter({\r\n    history: createWebHashHistory(),\r\n    routes\r\n})\r\n\r\nexport default router","import { createApp } from 'vue'\r\nimport App from './App.vue'\r\nimport router from './router'\r\nimport { createPinia } from 'pinia'\r\n\r\nconst app = createApp(App);\r\nconst pinia = createPinia();\r\n\r\napp.use(pinia);\r\napp.use(router);\r\napp.mount('#app');\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var deferred = [];\n__webpack_require__.O = function(result, chunkIds, fn, priority) {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every(function(key) { return __webpack_require__.O[key](chunkIds[j]); })) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","var getProto = Object.getPrototypeOf ? function(obj) { return Object.getPrototypeOf(obj); } : function(obj) { return obj.__proto__; };\nvar leafPrototypes;\n// create a fake namespace object\n// mode & 1: value is a module id, require it\n// mode & 2: merge all properties of value into the ns\n// mode & 4: return value when already ns object\n// mode & 16: return value when it's Promise-like\n// mode & 8|1: behave like require\n__webpack_require__.t = function(value, mode) {\n\tif(mode & 1) value = this(value);\n\tif(mode & 8) return value;\n\tif(typeof value === 'object' && value) {\n\t\tif((mode & 4) && value.__esModule) return value;\n\t\tif((mode & 16) && typeof value.then === 'function') return value;\n\t}\n\tvar ns = Object.create(null);\n\t__webpack_require__.r(ns);\n\tvar def = {};\n\tleafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];\n\tfor(var current = mode & 2 && value; typeof current == 'object' && !~leafPrototypes.indexOf(current); current = getProto(current)) {\n\t\tObject.getOwnPropertyNames(current).forEach(function(key) { def[key] = function() { return value[key]; }; });\n\t}\n\tdef['default'] = function() { return value; };\n\t__webpack_require__.d(ns, def);\n\treturn ns;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = function(chunkId) {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce(function(promises, key) {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks\n__webpack_require__.u = function(chunkId) {\n\t// return url for filenames based on template\n\treturn \"assets/js/\" + chunkId + \".\" + {\"40\":\"5b50ed63\",\"97\":\"2a128f07\",\"193\":\"6e4e4550\",\"330\":\"99cf8ebc\",\"574\":\"562fddda\",\"622\":\"417fc63b\",\"675\":\"0e734134\",\"811\":\"414046d9\",\"835\":\"b5ca7d4d\"}[chunkId] + \".js\";\n};","// This function allow to reference async chunks\n__webpack_require__.miniCssF = function(chunkId) {\n\t// return url for filenames based on template\n\treturn undefined;\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","var inProgress = {};\nvar dataWebpackPrefix = \"pglite_vector_search:\";\n// loadScript function to load a script via script tag\n__webpack_require__.l = function(url, done, key, chunkId) {\n\tif(inProgress[url]) { inProgress[url].push(done); return; }\n\tvar script, needAttach;\n\tif(key !== undefined) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tfor(var i = 0; i < scripts.length; i++) {\n\t\t\tvar s = scripts[i];\n\t\t\tif(s.getAttribute(\"src\") == url || s.getAttribute(\"data-webpack\") == dataWebpackPrefix + key) { script = s; break; }\n\t\t}\n\t}\n\tif(!script) {\n\t\tneedAttach = true;\n\t\tscript = document.createElement('script');\n\n\t\tscript.charset = 'utf-8';\n\t\tscript.timeout = 120;\n\t\tif (__webpack_require__.nc) {\n\t\t\tscript.setAttribute(\"nonce\", __webpack_require__.nc);\n\t\t}\n\t\tscript.setAttribute(\"data-webpack\", dataWebpackPrefix + key);\n\n\t\tscript.src = url;\n\t}\n\tinProgress[url] = [done];\n\tvar onScriptComplete = function(prev, event) {\n\t\t// avoid mem leaks in IE.\n\t\tscript.onerror = script.onload = null;\n\t\tclearTimeout(timeout);\n\t\tvar doneFns = inProgress[url];\n\t\tdelete inProgress[url];\n\t\tscript.parentNode && script.parentNode.removeChild(script);\n\t\tdoneFns && doneFns.forEach(function(fn) { return fn(event); });\n\t\tif(prev) return prev(event);\n\t}\n\tvar timeout = setTimeout(onScriptComplete.bind(null, undefined, { type: 'timeout', target: script }), 120000);\n\tscript.onerror = onScriptComplete.bind(null, script.onerror);\n\tscript.onload = onScriptComplete.bind(null, script.onload);\n\tneedAttach && document.head.appendChild(script);\n};","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.p = \"/PGLiteVectorSearch/\";","__webpack_require__.b = document.baseURI || self.location.href;\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t524: 0\n};\n\n__webpack_require__.f.j = function(chunkId, promises) {\n\t\t// JSONP chunk loading for javascript\n\t\tvar installedChunkData = __webpack_require__.o(installedChunks, chunkId) ? installedChunks[chunkId] : undefined;\n\t\tif(installedChunkData !== 0) { // 0 means \"already installed\".\n\n\t\t\t// a Promise means \"currently loading\".\n\t\t\tif(installedChunkData) {\n\t\t\t\tpromises.push(installedChunkData[2]);\n\t\t\t} else {\n\t\t\t\tif(true) { // all chunks have JS\n\t\t\t\t\t// setup Promise in chunk cache\n\t\t\t\t\tvar promise = new Promise(function(resolve, reject) { installedChunkData = installedChunks[chunkId] = [resolve, reject]; });\n\t\t\t\t\tpromises.push(installedChunkData[2] = promise);\n\n\t\t\t\t\t// start chunk loading\n\t\t\t\t\tvar url = __webpack_require__.p + __webpack_require__.u(chunkId);\n\t\t\t\t\t// create error before stack unwound to get useful stacktrace later\n\t\t\t\t\tvar error = new Error();\n\t\t\t\t\tvar loadingEnded = function(event) {\n\t\t\t\t\t\tif(__webpack_require__.o(installedChunks, chunkId)) {\n\t\t\t\t\t\t\tinstalledChunkData = installedChunks[chunkId];\n\t\t\t\t\t\t\tif(installedChunkData !== 0) installedChunks[chunkId] = undefined;\n\t\t\t\t\t\t\tif(installedChunkData) {\n\t\t\t\t\t\t\t\tvar errorType = event && (event.type === 'load' ? 'missing' : event.type);\n\t\t\t\t\t\t\t\tvar realSrc = event && event.target && event.target.src;\n\t\t\t\t\t\t\t\terror.message = 'Loading chunk ' + chunkId + ' failed.\\n(' + errorType + ': ' + realSrc + ')';\n\t\t\t\t\t\t\t\terror.name = 'ChunkLoadError';\n\t\t\t\t\t\t\t\terror.type = errorType;\n\t\t\t\t\t\t\t\terror.request = realSrc;\n\t\t\t\t\t\t\t\tinstalledChunkData[1](error);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\t__webpack_require__.l(url, loadingEnded, \"chunk-\" + chunkId, chunkId);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n};\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = function(chunkId) { return installedChunks[chunkId] === 0; };\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = function(parentChunkLoadingFunction, data) {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some(function(id) { return installedChunks[id] !== 0; })) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkpglite_vector_search\"] = self[\"webpackChunkpglite_vector_search\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [504], function() { return __webpack_require__(9645); })\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["_hoisted_1","class","_defineComponent","__name","setup","__props","_ctx","_cache","_openBlock","_createElementBlock","_createVNode","_unref","RouterView","__exports__","currentBaseURL","currentChatModel","currentEmbeddingModel","options","num_thread","setOllamaConfig","_a","baseURL","chatModel","embeddingModel","generateKeyWord","userMessage","systemPrompt","Promise","messages","role","content","fetch","concat","method","headers","body","JSON","stringify","model","stream","response","sent","ok","Error","status","statusText","json","data","message","console","error","error_1","streamChatMessage","memory","chatHistory","__spreadArray","__await","_d","reader","getReader","decoder","TextDecoder","buffer","read","_c","done","value","decode","lines","split","pop","lines_1","_i","length","line","trim","parse","_b","warn","parseError_1","error_2","generateEmbedding","prompt","embedding","error_3","getDimension","dimension","error_4","openai","useOllamaAPI","openAIEndpointSuffix","setOpenAIConfig","useOllama","undefined","OpenAI","apiKey","dangerouslyAllowBrowser","ollamaGenerateKeyWord","chat","completions","create","choices","referenceFiles","Array","from","Set","filter","m","filename","map","join","__asyncValues","ollamaStreamChatMessage","chunk","_e","_h","stream_1","stream_1_1","delta","ollamaGenerateEmbedding","embeddings","input","encoding_format","ollamaGetDimension","getCurrentConfig","pglite","PGlite","extensions","vector","initMemory","exec","insertMemory","section","sectionSequence","vec","safeContent","replace","safeVec","safeFilename","safeSection","safeSectionSequence","searchMemory","limit","threshold","query","result","rows","hybridSearchMemory","keywords","vectorWeight","keywordWeight","maxKeywordScore","minCombinedScore","keywordConditions","keywordScoreExpression","keywordCondition","isArray","every","k","validKeywords","toLowerCase","safeKeyword","whereConditions","combinedScoreExpression","chunkFile","file","chunkSize","ext","name","sections","text","chunkTxt","chunkMd","heading","splitLongContent","currentHeading","currentContent","startsWith","splitSections","push","apply","currentChunk","lines_2","useChatStore","defineStore","state","messageList","Map","isLoading","getters","actions","addMessage","question","isBot","setId","this","size","set","id","getBotReply","startTime","Date","now","isStreaming","streamingStartTime","keywordsCSV","log","catch","reason","errorHandler","vectorQuestion","messageArray","values","sort","a","b","slice","messageArray_1","msg","prev","get","responseTime","reason_1","currentMessage","__assign","uploadFile","isFileUpload","chunks","sectionSequenceMap","chunks_1","vectorchunk","sectionKey","reason_2","stack","_hoisted_2","_hoisted_3","_this","chatStore","sendMessage","ref","uploadedFile","fileInputRef","computed","onSendMessage","onFileButtonClick","click","onFileChange","event","__awaiter","target","files","onUpdated","window","scrollTo","top","document","scrollHeight","behavior","onSubmit","_withModifiers","_createElementVNode","ref_key","type","onChange","style","onClick","disabled","_withDirectives","$event","required","_vModelText","key","_hoisted_4","_hoisted_5","for","_hoisted_6","_hoisted_7","_hoisted_8","_hoisted_9","_hoisted_10","_hoisted_11","_hoisted_12","_hoisted_13","_hoisted_14","_hoisted_15","initialized","containerRef","currentTime","timeUpdateInterval","onMounted","setInterval","onUnmounted","clearInterval","getElapsedTime","elapsed","toFixed","getLoadingText","scrollToBottom","messagesContainer","querySelector","scrollTop","loadConfigFromStorage","saved","localStorage","getItem","config","sidebarOpen","toggleSidebar","updateConfig","setItem","alert","location","reload","watch","val","deep","defaultConfig","resetConfig","formatMessage","then","nextTick","_normalizeClass","closed","_createTextVNode","_Fragment","_vModelCheckbox","title","_createCommentVNode","_renderList","user","_toDisplayString","innerHTML","ChatForm","routes","path","component","BotBox","router","createRouter","history","createWebHashHistory","app","createApp","App","pinia","createPinia","use","mount","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","call","deferred","O","chunkIds","fn","priority","notFulfilled","Infinity","i","fulfilled","j","Object","keys","splice","r","n","getter","__esModule","d","leafPrototypes","getProto","getPrototypeOf","obj","__proto__","t","mode","ns","def","current","indexOf","getOwnPropertyNames","forEach","definition","o","defineProperty","enumerable","f","e","chunkId","all","reduce","promises","u","miniCssF","g","globalThis","Function","prop","prototype","hasOwnProperty","inProgress","dataWebpackPrefix","l","url","script","needAttach","scripts","getElementsByTagName","s","getAttribute","createElement","charset","timeout","nc","setAttribute","src","onScriptComplete","onerror","onload","clearTimeout","doneFns","parentNode","removeChild","setTimeout","bind","head","appendChild","Symbol","toStringTag","p","baseURI","self","href","installedChunks","installedChunkData","promise","resolve","reject","loadingEnded","errorType","realSrc","request","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","some","chunkLoadingGlobal","__webpack_exports__"],"sourceRoot":""}